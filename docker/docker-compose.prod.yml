version: '3'

services:
  mongo:
    image: mongo:4.0
    container_name: mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_ROOT_USERNAME=root
    networks:
      - webnet
    volumes:
      - db-mongo:/data/db

  mongo-express:
    image: mongo-express:0.54.0
    container_name: mexpress
    restart: always
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
    networks:
      - webnet

  express:
    build:
      context: ../be
      dockerfile: Dockerfile.Express
    container_name: express
    volumes:
      - ../be:/usr/app
    environment:
      - NODE_ENV=production
      - MONGODB_URL=mongodb://mongo:27017/GreenDelay
    command: npm start -- --host 0.0.0.0 --port 5000
    depends_on:
      - mongo
    networks:
      - webnet
      - traefik_proxy
    labels:
      - "traefik.http.services.express.loadbalancer.server.port=5000"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.express.rule=Host(`rapidstream.top`)"
      - "traefik.enable=true"
      - "traefik.http.routers.express.tls=true"
      - "traefik.http.routers.express.entrypoints=express"

  webserver:
    image: nginx:alpine
    container_name: flanp-webserver
    restart: unless-stopped
    tty: true
    volumes:
      - ../fe/dist/app:/var/www/api
      - ./docker-files/conf.d/nginxprod.conf:/etc/nginx/conf.d/default.conf
      - ./init.sh:/docker-entrypoint-init.sh
    networks:
      - webnet
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webserver.rule=Host(`rapidstream.top`)"
      - "traefik.http.routers.webserver.tls=true"
      - "traefik.http.routers.webserver.entrypoints=websecure"
      - "traefik.http.routers.webserver.tls.certresolver=myresolver"
      # redirect http
      - "traefik.http.middlewares.webserver.redirectscheme.permanent=true"
      - "traefik.http.middlewares.webserver.redirectscheme.scheme=https"
      - "traefik.http.middlewares.webserver.redirectscheme.port=443"
      # middleware redirect
      - "traefik.http.middlewares.webserver-redirect-to-https.redirectscheme.scheme=https"
      # global redirect to https
      - "traefik.http.routers.redirs-webserver.rule=hostregexp(`{any:.+}`)"
      - "traefik.http.routers.redirs-webserver.entrypoints=web"
      - "traefik.http.routers.redirs-webserver.middlewares=webserver"
    command: >
      sh -c "addgroup -S nginxgroup && adduser -S nginxuser -G nginxgroup && 
      chown -R nginxuser:nginxgroup /var/www/api && chmod -R 755 /var/www/api && 
      nginx -g 'daemon off;'"
  
  whoami:
    image: "containous/whoami"
    container_name: "simple-service"
    restart: always
    networks:
      - webnet
      - traefik_proxy
    labels:
      - "traefik.http.routers.whoami.rule=Host(`rapidstream.top`)"
      - "traefik.http.routers.container-site.entrypoints=websecure"
      - "traefik.http.routers.express.entrypoints=express"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.tls.certresolver=le"   

  traefik:
    image: traefik:v2.0
    container_name: traefik
    security_opt:
      - no-new-privileges:true
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.express.address=:5000"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=contato@flanp.com"
      - "--certificatesResolvers.myresolver.acme.httpChallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    restart: unless-stopped
    networks:
      - webnet
      - traefik_proxy
    ports:
      - "80:80"
      - "443:443"
      - "8085:8080"
      - "5000:5000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/certs
      - ./letsencrypt:/letsencrypt

networks:
  webnet:
    driver: bridge
  traefik_proxy:
    driver: bridge

volumes:
  db-mongo:
